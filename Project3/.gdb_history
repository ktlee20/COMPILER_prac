s
s
p funname
p funname
p stack->head->data 
p t->attr.scope 
p stack->head->data 
p stack->head->prev->data 
t->attr.scope
t
p t->attr.scope
p t->attr
n
p l
p l->type
p t->child[0]
p t->child[0]->type
s
l->type
p l->type
p t->child[0]
s
p t->sibling 
n
s
p i
s
p i
p t->child[i]
s
p *t
s
p i
p t->child
s
p *t
s
p *t
s
p *t
n
s
n
s
p t->sibling 
s
p *t
s
p *t
n
s
p *t
ss
s
p *t
n
s
n
s
p t->sibling 
n
s
p i
s
p *t
s
s
p *t
s
p *t
s
s
p *t
s
p *t
n
p *t
s
n
s
p t->sibling 
n
s
p i
s
p i
p t->child[i]
s
s
p *t
s
p i
s
p i
p *t
n
s
n
s
p *t
s
p i
s
p i
p t->child
n
s
p *t
s
p t->child[0]
p *t->child[0]
p *t->child[1]
s
n
p right->attr.name 
n
s
p *t
n
s
p i
s
p i
p t->child[0]
p t->child[1]
s
p *t
s
s
s
p i
s
p i
p t->child
n
s
p t->attr.name
s
n
p t->sibling 
n
s
p i
p t->child
n
ss
s
p left
p *left
s
p left->attr.name
q
b typeCheck 
r test.cm
p key
q
b buildSymtab 
r test.cm
n
s
n
s
n
s
p *t
n
s
n
s
p *t
n
s
n
s
p *t
n
s
p *t
n
s
p *t
n
s
n
q
b buildSymtab 
r test.cm
n
s
n
s
n
s
n
n
s
n
s
n
s
n
s
p *t
n
s
p *t
n
s
p *t
n
s
p *t
n
s
p *t
s
q
b buildSymtab 
b traverse 
r test.cm
c
n
d br
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
p *t
n
s
p *t
n
s
p *t
n
n
s
p *t
s
s
p t->kind.decl
s
p funname
p stack->numOfSData 
q
